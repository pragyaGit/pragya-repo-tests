{"ast":null,"code":"var _jsxFileName = \"/Users/pragya/Documents/TEST/react-Wowcher-Test-v2.0/react-Wowcher-Test/src/App.js\";\nimport React, { Component } from \"react\"; // import axios from 'axios';\n\nimport \"./App.css\";\n\nconst formatNumber = number => new Intl.NumberFormat(\"en\", {\n  minimumFractionDigits: 2\n}).format(number);\n\nconst urls = [\"api/branch1.json\", \"api/branch2.json\", \"api/branch3.json\"];\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.searchSpace = event => {\n      let keyword = event.target.value;\n      this.setState({\n        search: keyword\n      });\n    };\n\n    this.componentDidMount = () => {\n      Promise.all([fetch(\"api/branch1.json\"), fetch(\"api/branch2.json\"), fetch(\"api/branch3.json\")]).then(function (responses) {\n        // Get a JSON object from each of the responses\n        return Promise.all(responses.map(function (response) {\n          return response.json();\n        }));\n      }).then(data => {\n        // Log the data to the console\n        // You would do something with both sets of data here\n        this.setState({\n          products: data\n        });\n        console.log(\"products\", this.state.products);\n        console.log(\"data\", data);\n      }).catch(function (error) {\n        // if there's an error, log it\n        console.log(error);\n      });\n    };\n\n    this.state = {\n      products: [],\n      sum: [],\n      search: null\n    };\n  }\n\n  render() {\n    const products = this.state;\n    console.log(\"products my print - \", products);\n    const ProductTotal = products.products.filter(data => {\n      if (this.state.search == null) return data;else if (data.name.toLowerCase().includes(this.state.search.toLowerCase())) {\n        return data;\n      }\n    }).reduce((totalProducts, product) => totalProducts + product.unitPrice, 0);\n    console.log(\"total\", ProductTotal); // const ProductTotal1 = products.products.map(({ products }) => {\n    //   return products.reduce((prev, { unitPrice }) => {\n    //     return +prev['unitPrice'].replace(/,/g, '') +  +unitPrice.replace(/,/g, '');\n    //   });\n    // });\n    // const total = ProductTotal1.reduce((prev, next) => prev + next);\n    // console.log(total);\n\n    const sum = products.products.reduce((acc, course) => {\n      acc[course.branchId] = course.products.reduce((acc, el) => acc + el.unitPrice, 0);\n      return acc;\n    }, {}); // this.setState({ sum: sum});\n\n    console.log(sum);\n    const exercises_courses = products.products.map(item => {\n      item.products.reduce((sum, part) => sum + part.unitPrice, 0);\n      return sum;\n    });\n    const sum_all = exercises_courses.reduce((sum, sum_one) => sum + sum_one, 0);\n    console.log(exercises_courses);\n    console.log(\"sum all\", sum_all); ///////search/////////////////\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"product-list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }\n    }, \"Search Products\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      onChange: e => this.searchSpace(e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"table\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"thead\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 15\n      }\n    }, \"Product\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 15\n      }\n    }, \"Revenue\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }\n    }, products.products.map((item, index) => /*#__PURE__*/React.createElement(\"div\", {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 15\n      }\n    }, item.products.map((c, i) => /*#__PURE__*/React.createElement(\"tr\", {\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 21\n      }\n    }, c.name), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 21\n      }\n    }, c.unitPrice), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 21\n      }\n    })))))), /*#__PURE__*/React.createElement(\"tfoot\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 15\n      }\n    }, \"Total\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 15\n      }\n    }, ProductTotal)))));\n  }\n\n}\n\nexport default App; // {\n//   this.state.todos &&\n//   Object.keys(icon).map(function (element) {\n//      return <tr>\n//        <td>{element}</td>\n//        <td>{icon[element]}</td>\n//      </tr>;\n//     })\n// }\n/////////////\n// {products.products.map(image => <div>{image.name}</div>)}\n//    {\n//     products.products.filter((data)=>{\n//       if(this.state.search == null)\n//         return data\n//       else if(data.name.toLowerCase().includes(this.state.search.toLowerCase())) {\n//         return data\n// }\n// }).map(function (element) {\n//        return <tr>\n//          <td>{element.name}</td>\n//          <td>{element.unitPrice}</td>\n//        </tr>;\n//       })\n//   }","map":{"version":3,"sources":["/Users/pragya/Documents/TEST/react-Wowcher-Test-v2.0/react-Wowcher-Test/src/App.js"],"names":["React","Component","formatNumber","number","Intl","NumberFormat","minimumFractionDigits","format","urls","App","constructor","props","searchSpace","event","keyword","target","value","setState","search","componentDidMount","Promise","all","fetch","then","responses","map","response","json","data","products","console","log","state","catch","error","sum","render","ProductTotal","filter","name","toLowerCase","includes","reduce","totalProducts","product","unitPrice","acc","course","branchId","el","exercises_courses","item","part","sum_all","sum_one","e","index","c","i"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n// import axios from 'axios';\nimport \"./App.css\";\n\nconst formatNumber = number =>\n  new Intl.NumberFormat(\"en\", { minimumFractionDigits: 2 }).format(number);\nconst urls = [\"api/branch1.json\", \"api/branch2.json\", \"api/branch3.json\"];\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      products: [],\n      sum: [],\n      search: null\n    };\n  }\n\n  searchSpace = event => {\n    let keyword = event.target.value;\n    this.setState({ search: keyword });\n  };\n\n  componentDidMount = () => {\n    Promise.all([\n      fetch(\"api/branch1.json\"),\n      fetch(\"api/branch2.json\"),\n      fetch(\"api/branch3.json\")\n    ])\n      .then(function(responses) {\n        // Get a JSON object from each of the responses\n        return Promise.all(\n          responses.map(function(response) {\n            return response.json();\n          })\n        );\n      })\n      .then(data => {\n        // Log the data to the console\n        // You would do something with both sets of data here\n        this.setState({ products: data });\n        console.log(\"products\", this.state.products);\n        console.log(\"data\", data);\n      })\n      .catch(function(error) {\n        // if there's an error, log it\n        console.log(error);\n      });\n  };\n\n  render() {\n    const products = this.state;\n    console.log(\"products my print - \", products);\n    const ProductTotal = products.products\n      .filter(data => {\n        if (this.state.search == null) return data;\n        else if (\n          data.name.toLowerCase().includes(this.state.search.toLowerCase())\n        ) {\n          return data;\n        }\n      })\n      .reduce((totalProducts, product) => totalProducts + product.unitPrice, 0);\n    console.log(\"total\", ProductTotal);\n\n    // const ProductTotal1 = products.products.map(({ products }) => {\n    //   return products.reduce((prev, { unitPrice }) => {\n    //     return +prev['unitPrice'].replace(/,/g, '') +  +unitPrice.replace(/,/g, '');\n    //   });\n    // });\n\n    // const total = ProductTotal1.reduce((prev, next) => prev + next);\n\n    // console.log(total);\n    const sum = products.products.reduce((acc, course) => {\n      acc[course.branchId] = course.products.reduce(\n        (acc, el) => acc + el.unitPrice,\n        0\n      );\n      return acc;\n    }, {});\n    // this.setState({ sum: sum});\n    console.log(sum);\n    const exercises_courses = products.products.map(item => {\n      item.products.reduce((sum, part) => sum + part.unitPrice, 0);\n      return sum;\n    });\n    const sum_all = exercises_courses.reduce(\n      (sum, sum_one) => sum + sum_one,\n      0\n    );\n\n    console.log(exercises_courses);\n    console.log(\"sum all\", sum_all);\n    ///////search/////////////////\n\n    return (\n      <div className=\"product-list\">\n        <label>Search Products</label>\n        <input type=\"text\" onChange={e => this.searchSpace(e)} />\n\n        <table>\n          <thead>\n            <tr>\n              <th>Product</th>\n              <th>Revenue</th>\n            </tr>\n          </thead>\n          <tbody>\n            {products.products.map((item, index) => (\n              <div key={index}>\n                {item.products.map((c, i) => (\n                  <tr key={i}>\n                    <td>{c.name}</td>\n                    <td>{c.unitPrice}</td>\n                    <hr />\n                  </tr>\n                ))}\n              </div>\n            ))}\n          </tbody>\n          <tfoot>\n            <tr>\n              <td>Total</td>\n              <td>{ProductTotal}</td>\n            </tr>\n          </tfoot>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n// {\n//   this.state.todos &&\n//   Object.keys(icon).map(function (element) {\n//      return <tr>\n//        <td>{element}</td>\n//        <td>{icon[element]}</td>\n//      </tr>;\n//     })\n// }\n/////////////\n// {products.products.map(image => <div>{image.name}</div>)}\n\n//    {\n//     products.products.filter((data)=>{\n//       if(this.state.search == null)\n//         return data\n//       else if(data.name.toLowerCase().includes(this.state.search.toLowerCase())) {\n//         return data\n// }\n// }).map(function (element) {\n//        return <tr>\n//          <td>{element.name}</td>\n//          <td>{element.unitPrice}</td>\n//        </tr>;\n//       })\n//   }\n"]},"metadata":{},"sourceType":"module"}